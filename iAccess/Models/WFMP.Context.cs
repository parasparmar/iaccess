//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace iAccess.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Dev : DbContext
    {
        public Dev()
            : base("name=Dev")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<RosterMst> RosterMsts { get; set; }
        public virtual DbSet<tbl_Master_Approver> tbl_Master_Approver { get; set; }
        public virtual DbSet<tblEnableDisable> tblEnableDisables { get; set; }
        public virtual DbSet<tblLeaveType> tblLeaveTypes { get; set; }
        public virtual DbSet<tblMaster> tblMasters { get; set; }
        public virtual DbSet<tblMasterApprover> tblMasterApprovers { get; set; }
        public virtual DbSet<tblRstWeek> tblRstWeeks { get; set; }
        public virtual DbSet<tblShiftCode> tblShiftCodes { get; set; }
        public virtual DbSet<tblSkillSet> tblSkillSets { get; set; }
        public virtual DbSet<tbltrans_Movement> tbltrans_Movement { get; set; }
        public virtual DbSet<RosterMstLog> RosterMstLogs { get; set; }
        public virtual DbSet<RosterOptimization> RosterOptimizations { get; set; }
        public virtual DbSet<tbl_datewise_leave> tbl_datewise_leave { get; set; }
        public virtual DbSet<tbl_leave_request> tbl_leave_request { get; set; }
        public virtual DbSet<tbl_leave_request_Log> tbl_leave_request_Log { get; set; }
        public virtual DbSet<tblCountry> tblCountries { get; set; }
        public virtual DbSet<tblDepartment> tblDepartments { get; set; }
        public virtual DbSet<tblDepartmentLinkMst> tblDepartmentLinkMsts { get; set; }
        public virtual DbSet<tblDesignation> tblDesignations { get; set; }
        public virtual DbSet<tblEmpStatu> tblEmpStatus { get; set; }
        public virtual DbSet<tblFunction> tblFunctions { get; set; }
        public virtual DbSet<tblGender> tblGenders { get; set; }
        public virtual DbSet<tblIntervalTracker> tblIntervalTrackers { get; set; }
        public virtual DbSet<tblJob_Type> tblJob_Type { get; set; }
        public virtual DbSet<tblLevel> tblLevels { get; set; }
        public virtual DbSet<tblLOB> tblLOBs { get; set; }
        public virtual DbSet<tblLocation> tblLocations { get; set; }
        public virtual DbSet<tblMappingMst> tblMappingMsts { get; set; }
        public virtual DbSet<tblMaritalStatu> tblMaritalStatus { get; set; }
        public virtual DbSet<tblMaster_BU> tblMaster_BU { get; set; }
        public virtual DbSet<tblMaster_Log> tblMaster_Log { get; set; }
        public virtual DbSet<tblMovementState> tblMovementStates { get; set; }
        public virtual DbSet<tblMovementType> tblMovementTypes { get; set; }
        public virtual DbSet<tblPincode> tblPincodes { get; set; }
        public virtual DbSet<tblProfile> tblProfiles { get; set; }
        public virtual DbSet<tblQry> tblQries { get; set; }
        public virtual DbSet<tblQualification> tblQualifications { get; set; }
        public virtual DbSet<tblSite> tblSites { get; set; }
        public virtual DbSet<tblSkill> tblSkills { get; set; }
        public virtual DbSet<tblSubSkillSet> tblSubSkillSets { get; set; }
        public virtual DbSet<tblSwap> tblSwaps { get; set; }
        public virtual DbSet<tblSwapMst> tblSwapMsts { get; set; }
        public virtual DbSet<tblTrainingStatu> tblTrainingStatus { get; set; }
    
        [DbFunction("Dev", "fn_delimitedtotable")]
        public virtual IQueryable<fn_delimitedtotable_Result> fn_delimitedtotable(string delimitedString)
        {
            var delimitedStringParameter = delimitedString != null ?
                new ObjectParameter("DelimitedString", delimitedString) :
                new ObjectParameter("DelimitedString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_delimitedtotable_Result>("[Dev].[fn_delimitedtotable](@DelimitedString)", delimitedStringParameter);
        }
    
        [DbFunction("Dev", "getKPIWiseResponsibilities")]
        public virtual IQueryable<getKPIWiseResponsibilities_Result> getKPIWiseResponsibilities()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getKPIWiseResponsibilities_Result>("[Dev].[getKPIWiseResponsibilities]()");
        }
    
        [DbFunction("Dev", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[Dev].[SplitString](@Input, @Character)", inputParameter, characterParameter);
        }
    
        [DbFunction("Dev", "Test_Plz_Delete")]
        public virtual IQueryable<Test_Plz_Delete_Result> Test_Plz_Delete()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Test_Plz_Delete_Result>("[Dev].[Test_Plz_Delete]()");
        }
    
        [DbFunction("Dev", "xGetdateBetween")]
        public virtual IQueryable<xGetdateBetween_Result> xGetdateBetween(string increment, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var incrementParameter = increment != null ?
                new ObjectParameter("Increment", increment) :
                new ObjectParameter("Increment", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<xGetdateBetween_Result>("[Dev].[xGetdateBetween](@Increment, @StartDate, @EndDate)", incrementParameter, startDateParameter, endDateParameter);
        }
    
        [DbFunction("Dev", "xGetMonthsGlidePath")]
        public virtual IQueryable<xGetMonthsGlidePath_Result> xGetMonthsGlidePath(Nullable<System.DateTime> startDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<xGetMonthsGlidePath_Result>("[Dev].[xGetMonthsGlidePath](@startDate)", startDateParameter);
        }
    
        [DbFunction("Dev", "xGetWeekDates")]
        public virtual IQueryable<xGetWeekDates_Result> xGetWeekDates(Nullable<System.DateTime> xDate, Nullable<bool> xSD, string increment)
        {
            var xDateParameter = xDate.HasValue ?
                new ObjectParameter("xDate", xDate) :
                new ObjectParameter("xDate", typeof(System.DateTime));
    
            var xSDParameter = xSD.HasValue ?
                new ObjectParameter("xSD", xSD) :
                new ObjectParameter("xSD", typeof(bool));
    
            var incrementParameter = increment != null ?
                new ObjectParameter("Increment", increment) :
                new ObjectParameter("Increment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<xGetWeekDates_Result>("[Dev].[xGetWeekDates](@xDate, @xSD, @Increment)", xDateParameter, xSDParameter, incrementParameter);
        }
    
        [DbFunction("Dev", "xWeekStart")]
        public virtual IQueryable<xWeekStart_Result> xWeekStart(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<xWeekStart_Result>("[Dev].[xWeekStart](@startDate, @endDate)", startDateParameter, endDateParameter);
        }
    
        public virtual int CompareProcedure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompareProcedure");
        }
    
        public virtual int CompareTables()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompareTables");
        }
    
        public virtual int CRMDataImport(string fileName)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRMDataImport", fileNameParameter);
        }
    
        public virtual ObjectResult<FillChart9box_Result> FillChart9box(Nullable<int> eMPCODE, string period)
        {
            var eMPCODEParameter = eMPCODE.HasValue ?
                new ObjectParameter("EMPCODE", eMPCODE) :
                new ObjectParameter("EMPCODE", typeof(int));
    
            var periodParameter = period != null ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillChart9box_Result>("FillChart9box", eMPCODEParameter, periodParameter);
        }
    
        public virtual ObjectResult<FillDesignation9Box_Result> FillDesignation9Box(Nullable<int> repMgrCode)
        {
            var repMgrCodeParameter = repMgrCode.HasValue ?
                new ObjectParameter("RepMgrCode", repMgrCode) :
                new ObjectParameter("RepMgrCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDesignation9Box_Result>("FillDesignation9Box", repMgrCodeParameter);
        }
    
        public virtual ObjectResult<FillTeamList9box_Result> FillTeamList9box(Nullable<int> empCode, string period)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var periodParameter = period != null ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillTeamList9box_Result>("FillTeamList9box", empCodeParameter, periodParameter);
        }
    
        public virtual ObjectResult<GetAccountProdHrsChk_Result> GetAccountProdHrsChk(Nullable<System.DateTime> mONTH, string mARKET, string facility)
        {
            var mONTHParameter = mONTH.HasValue ?
                new ObjectParameter("MONTH", mONTH) :
                new ObjectParameter("MONTH", typeof(System.DateTime));
    
            var mARKETParameter = mARKET != null ?
                new ObjectParameter("MARKET", mARKET) :
                new ObjectParameter("MARKET", typeof(string));
    
            var facilityParameter = facility != null ?
                new ObjectParameter("Facility", facility) :
                new ObjectParameter("Facility", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountProdHrsChk_Result>("GetAccountProdHrsChk", mONTHParameter, mARKETParameter, facilityParameter);
        }
    
        public virtual ObjectResult<GetAgentDataforHiddenAgents_Result> GetAgentDataforHiddenAgents(Nullable<System.DateTime> xDate)
        {
            var xDateParameter = xDate.HasValue ?
                new ObjectParameter("xDate", xDate) :
                new ObjectParameter("xDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAgentDataforHiddenAgents_Result>("GetAgentDataforHiddenAgents", xDateParameter);
        }
    
        public virtual ObjectResult<GetFacilityProdHrsChk_Result> GetFacilityProdHrsChk(Nullable<System.DateTime> mONTH, string mARKET)
        {
            var mONTHParameter = mONTH.HasValue ?
                new ObjectParameter("MONTH", mONTH) :
                new ObjectParameter("MONTH", typeof(System.DateTime));
    
            var mARKETParameter = mARKET != null ?
                new ObjectParameter("MARKET", mARKET) :
                new ObjectParameter("MARKET", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFacilityProdHrsChk_Result>("GetFacilityProdHrsChk", mONTHParameter, mARKETParameter);
        }
    
        public virtual int GetHiringPlanData(Nullable<int> xYear)
        {
            var xYearParameter = xYear.HasValue ?
                new ObjectParameter("xYear", xYear) :
                new ObjectParameter("xYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetHiringPlanData", xYearParameter);
        }
    
        public virtual ObjectResult<GetIntradayList_Result> GetIntradayList(Nullable<int> xServer)
        {
            var xServerParameter = xServer.HasValue ?
                new ObjectParameter("xServer", xServer) :
                new ObjectParameter("xServer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIntradayList_Result>("GetIntradayList", xServerParameter);
        }
    
        public virtual ObjectResult<GetMarketProdHrsChk_Result> GetMarketProdHrsChk(Nullable<System.DateTime> mONTH)
        {
            var mONTHParameter = mONTH.HasValue ?
                new ObjectParameter("MONTH", mONTH) :
                new ObjectParameter("MONTH", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMarketProdHrsChk_Result>("GetMarketProdHrsChk", mONTHParameter);
        }
    
        public virtual ObjectResult<GetMonthProdHrsChk_Result> GetMonthProdHrsChk()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMonthProdHrsChk_Result>("GetMonthProdHrsChk");
        }
    
        public virtual ObjectResult<string> NINEBOXfillDdlPeriod()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("NINEBOXfillDdlPeriod");
        }
    
        public virtual ObjectResult<NINEBOXgetCompetency_Result> NINEBOXgetCompetency(Nullable<int> empcode, string period, Nullable<int> type)
        {
            var empcodeParameter = empcode.HasValue ?
                new ObjectParameter("Empcode", empcode) :
                new ObjectParameter("Empcode", typeof(int));
    
            var periodParameter = period != null ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NINEBOXgetCompetency_Result>("NINEBOXgetCompetency", empcodeParameter, periodParameter, typeParameter);
        }
    
        public virtual ObjectResult<NINEBOXgetEmpStats_Result> NINEBOXgetEmpStats(Nullable<int> empCode, string period)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var periodParameter = period != null ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NINEBOXgetEmpStats_Result>("NINEBOXgetEmpStats", empCodeParameter, periodParameter);
        }
    
        public virtual ObjectResult<NineBoxTest_Result> NineBoxTest(Nullable<int> empCode, string period)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var periodParameter = period != null ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NineBoxTest_Result>("NineBoxTest", empCodeParameter, periodParameter);
        }
    
        public virtual ObjectResult<ProdHrsChk_Result> ProdHrsChk(Nullable<System.DateTime> xMONTH, string mARKET, string fACILITY, string aCCOUNT)
        {
            var xMONTHParameter = xMONTH.HasValue ?
                new ObjectParameter("XMONTH", xMONTH) :
                new ObjectParameter("XMONTH", typeof(System.DateTime));
    
            var mARKETParameter = mARKET != null ?
                new ObjectParameter("MARKET", mARKET) :
                new ObjectParameter("MARKET", typeof(string));
    
            var fACILITYParameter = fACILITY != null ?
                new ObjectParameter("FACILITY", fACILITY) :
                new ObjectParameter("FACILITY", typeof(string));
    
            var aCCOUNTParameter = aCCOUNT != null ?
                new ObjectParameter("ACCOUNT", aCCOUNT) :
                new ObjectParameter("ACCOUNT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProdHrsChk_Result>("ProdHrsChk", xMONTHParameter, mARKETParameter, fACILITYParameter, aCCOUNTParameter);
        }
    
        public virtual ObjectResult<ProdHrsChk2_Result> ProdHrsChk2(Nullable<System.DateTime> xMONTH, string mARKET, string fACILITY, string aCCOUNT)
        {
            var xMONTHParameter = xMONTH.HasValue ?
                new ObjectParameter("XMONTH", xMONTH) :
                new ObjectParameter("XMONTH", typeof(System.DateTime));
    
            var mARKETParameter = mARKET != null ?
                new ObjectParameter("MARKET", mARKET) :
                new ObjectParameter("MARKET", typeof(string));
    
            var fACILITYParameter = fACILITY != null ?
                new ObjectParameter("FACILITY", fACILITY) :
                new ObjectParameter("FACILITY", typeof(string));
    
            var aCCOUNTParameter = aCCOUNT != null ?
                new ObjectParameter("ACCOUNT", aCCOUNT) :
                new ObjectParameter("ACCOUNT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProdHrsChk2_Result>("ProdHrsChk2", xMONTHParameter, mARKETParameter, fACILITYParameter, aCCOUNTParameter);
        }
    
        public virtual int ProdHrsChkComparison(Nullable<System.DateTime> mONTH, string mARKET, string fACILITY, string aCCOUNT)
        {
            var mONTHParameter = mONTH.HasValue ?
                new ObjectParameter("MONTH", mONTH) :
                new ObjectParameter("MONTH", typeof(System.DateTime));
    
            var mARKETParameter = mARKET != null ?
                new ObjectParameter("MARKET", mARKET) :
                new ObjectParameter("MARKET", typeof(string));
    
            var fACILITYParameter = fACILITY != null ?
                new ObjectParameter("FACILITY", fACILITY) :
                new ObjectParameter("FACILITY", typeof(string));
    
            var aCCOUNTParameter = aCCOUNT != null ?
                new ObjectParameter("ACCOUNT", aCCOUNT) :
                new ObjectParameter("ACCOUNT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProdHrsChkComparison", mONTHParameter, mARKETParameter, fACILITYParameter, aCCOUNTParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> ResetSchedule_Service()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("ResetSchedule_Service");
        }
    
        public virtual ObjectResult<string> ServerTimeZone()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ServerTimeZone");
        }
    
        public virtual int setErrorLog(string project, string module, string location, string innerExceptionType, string innerExceptionMessage, string innerExceptionSource, string innerExceptionStackTrace, string exceptionType, string exceptionMessage, string exceptionSource, string exceptionStackTrace, string updatedBy, Nullable<int> updatedByEmpCode, Nullable<bool> followUpFlag, ObjectParameter iD)
        {
            var projectParameter = project != null ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(string));
    
            var moduleParameter = module != null ?
                new ObjectParameter("Module", module) :
                new ObjectParameter("Module", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var innerExceptionTypeParameter = innerExceptionType != null ?
                new ObjectParameter("InnerExceptionType", innerExceptionType) :
                new ObjectParameter("InnerExceptionType", typeof(string));
    
            var innerExceptionMessageParameter = innerExceptionMessage != null ?
                new ObjectParameter("InnerExceptionMessage", innerExceptionMessage) :
                new ObjectParameter("InnerExceptionMessage", typeof(string));
    
            var innerExceptionSourceParameter = innerExceptionSource != null ?
                new ObjectParameter("InnerExceptionSource", innerExceptionSource) :
                new ObjectParameter("InnerExceptionSource", typeof(string));
    
            var innerExceptionStackTraceParameter = innerExceptionStackTrace != null ?
                new ObjectParameter("InnerExceptionStackTrace", innerExceptionStackTrace) :
                new ObjectParameter("InnerExceptionStackTrace", typeof(string));
    
            var exceptionTypeParameter = exceptionType != null ?
                new ObjectParameter("ExceptionType", exceptionType) :
                new ObjectParameter("ExceptionType", typeof(string));
    
            var exceptionMessageParameter = exceptionMessage != null ?
                new ObjectParameter("ExceptionMessage", exceptionMessage) :
                new ObjectParameter("ExceptionMessage", typeof(string));
    
            var exceptionSourceParameter = exceptionSource != null ?
                new ObjectParameter("ExceptionSource", exceptionSource) :
                new ObjectParameter("ExceptionSource", typeof(string));
    
            var exceptionStackTraceParameter = exceptionStackTrace != null ?
                new ObjectParameter("ExceptionStackTrace", exceptionStackTrace) :
                new ObjectParameter("ExceptionStackTrace", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedByEmpCodeParameter = updatedByEmpCode.HasValue ?
                new ObjectParameter("UpdatedByEmpCode", updatedByEmpCode) :
                new ObjectParameter("UpdatedByEmpCode", typeof(int));
    
            var followUpFlagParameter = followUpFlag.HasValue ?
                new ObjectParameter("FollowUpFlag", followUpFlag) :
                new ObjectParameter("FollowUpFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setErrorLog", projectParameter, moduleParameter, locationParameter, innerExceptionTypeParameter, innerExceptionMessageParameter, innerExceptionSourceParameter, innerExceptionStackTraceParameter, exceptionTypeParameter, exceptionMessageParameter, exceptionSourceParameter, exceptionStackTraceParameter, updatedByParameter, updatedByEmpCodeParameter, followUpFlagParameter, iD);
        }
    
        public virtual int setFollowUpOnError(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setFollowUpOnError", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SHRINKAGE_GETHIRINGPLANDATA(string xYear, string xMonth, string xWeek, string fieldName, string mARKETID, string aCCOUNTID, string lOBID, string fACILITYID)
        {
            var xYearParameter = xYear != null ?
                new ObjectParameter("xYear", xYear) :
                new ObjectParameter("xYear", typeof(string));
    
            var xMonthParameter = xMonth != null ?
                new ObjectParameter("xMonth", xMonth) :
                new ObjectParameter("xMonth", typeof(string));
    
            var xWeekParameter = xWeek != null ?
                new ObjectParameter("xWeek", xWeek) :
                new ObjectParameter("xWeek", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var mARKETIDParameter = mARKETID != null ?
                new ObjectParameter("MARKETID", mARKETID) :
                new ObjectParameter("MARKETID", typeof(string));
    
            var aCCOUNTIDParameter = aCCOUNTID != null ?
                new ObjectParameter("ACCOUNTID", aCCOUNTID) :
                new ObjectParameter("ACCOUNTID", typeof(string));
    
            var lOBIDParameter = lOBID != null ?
                new ObjectParameter("LOBID", lOBID) :
                new ObjectParameter("LOBID", typeof(string));
    
            var fACILITYIDParameter = fACILITYID != null ?
                new ObjectParameter("FACILITYID", fACILITYID) :
                new ObjectParameter("FACILITYID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SHRINKAGE_GETHIRINGPLANDATA", xYearParameter, xMonthParameter, xWeekParameter, fieldNameParameter, mARKETIDParameter, aCCOUNTIDParameter, lOBIDParameter, fACILITYIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SHRINKAGE_GETHIRINGPLANDATA2(string xYear, string xMonth, string xWeek, string fieldName, string mARKETID, string aCCOUNTID, string lOBID, string fACILITYID)
        {
            var xYearParameter = xYear != null ?
                new ObjectParameter("xYear", xYear) :
                new ObjectParameter("xYear", typeof(string));
    
            var xMonthParameter = xMonth != null ?
                new ObjectParameter("xMonth", xMonth) :
                new ObjectParameter("xMonth", typeof(string));
    
            var xWeekParameter = xWeek != null ?
                new ObjectParameter("xWeek", xWeek) :
                new ObjectParameter("xWeek", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var mARKETIDParameter = mARKETID != null ?
                new ObjectParameter("MARKETID", mARKETID) :
                new ObjectParameter("MARKETID", typeof(string));
    
            var aCCOUNTIDParameter = aCCOUNTID != null ?
                new ObjectParameter("ACCOUNTID", aCCOUNTID) :
                new ObjectParameter("ACCOUNTID", typeof(string));
    
            var lOBIDParameter = lOBID != null ?
                new ObjectParameter("LOBID", lOBID) :
                new ObjectParameter("LOBID", typeof(string));
    
            var fACILITYIDParameter = fACILITYID != null ?
                new ObjectParameter("FACILITYID", fACILITYID) :
                new ObjectParameter("FACILITYID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SHRINKAGE_GETHIRINGPLANDATA2", xYearParameter, xMonthParameter, xWeekParameter, fieldNameParameter, mARKETIDParameter, aCCOUNTIDParameter, lOBIDParameter, fACILITYIDParameter);
        }
    
        public virtual ObjectResult<skillbox9_Result> skillbox9(Nullable<int> empcode, Nullable<int> skill)
        {
            var empcodeParameter = empcode.HasValue ?
                new ObjectParameter("Empcode", empcode) :
                new ObjectParameter("Empcode", typeof(int));
    
            var skillParameter = skill.HasValue ?
                new ObjectParameter("Skill", skill) :
                new ObjectParameter("Skill", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<skillbox9_Result>("skillbox9", empcodeParameter, skillParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_GetTableReportAutomationSupportFiles_Result> sp_GetTableReportAutomationSupportFiles(Nullable<int> transID)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTableReportAutomationSupportFiles_Result>("sp_GetTableReportAutomationSupportFiles", transIDParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<sp_skillbox9_Result> sp_skillbox9(Nullable<int> empcode, Nullable<byte> skill)
        {
            var empcodeParameter = empcode.HasValue ?
                new ObjectParameter("Empcode", empcode) :
                new ObjectParameter("Empcode", typeof(int));
    
            var skillParameter = skill.HasValue ?
                new ObjectParameter("Skill", skill) :
                new ObjectParameter("Skill", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_skillbox9_Result>("sp_skillbox9", empcodeParameter, skillParameter);
        }
    
        public virtual ObjectResult<Sp_UpdateServSche_Result> Sp_UpdateServSche(Nullable<bool> iSRUNNING, Nullable<int> serviceID)
        {
            var iSRUNNINGParameter = iSRUNNING.HasValue ?
                new ObjectParameter("ISRUNNING", iSRUNNING) :
                new ObjectParameter("ISRUNNING", typeof(bool));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_UpdateServSche_Result>("Sp_UpdateServSche", iSRUNNINGParameter, serviceIDParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<spGetServiceTimer_Result> spGetServiceTimer(Nullable<int> xServiceID)
        {
            var xServiceIDParameter = xServiceID.HasValue ?
                new ObjectParameter("xServiceID", xServiceID) :
                new ObjectParameter("xServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetServiceTimer_Result>("spGetServiceTimer", xServiceIDParameter);
        }
    
        public virtual int UpdateProdHrsChk(Nullable<int> empCode, Nullable<System.DateTime> month, string comments, string updatedBy, ObjectParameter updatedOn)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(System.DateTime));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProdHrsChk", empCodeParameter, monthParameter, commentsParameter, updatedByParameter, updatedOn);
        }
    
        public virtual int UpdateTblABC(Nullable<int> id, string comments, Nullable<int> updatedBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTblABC", idParameter, commentsParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<buildBadges_Result> buildBadges(Nullable<int> eCN)
        {
            var eCNParameter = eCN.HasValue ?
                new ObjectParameter("ECN", eCN) :
                new ObjectParameter("ECN", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<buildBadges_Result>("buildBadges", eCNParameter);
        }
    
        public virtual int cancelLeaveRequest(Nullable<int> empCode, Nullable<int> leaveRequestID, string reasonForCancellation)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var leaveRequestIDParameter = leaveRequestID.HasValue ?
                new ObjectParameter("LeaveRequestID", leaveRequestID) :
                new ObjectParameter("LeaveRequestID", typeof(int));
    
            var reasonForCancellationParameter = reasonForCancellation != null ?
                new ObjectParameter("ReasonForCancellation", reasonForCancellation) :
                new ObjectParameter("ReasonForCancellation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cancelLeaveRequest", empCodeParameter, leaveRequestIDParameter, reasonForCancellationParameter);
        }
    
        public virtual ObjectResult<string> fillAccountLOB(string account)
        {
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("fillAccountLOB", accountParameter);
        }
    
        public virtual ObjectResult<fillEmployeeAccounts_Result> fillEmployeeAccounts(Nullable<int> empCode)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<fillEmployeeAccounts_Result>("fillEmployeeAccounts", empCodeParameter);
        }
    
        public virtual ObjectResult<fillInterval_Result> fillInterval()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<fillInterval_Result>("fillInterval");
        }
    
        public virtual ObjectResult<string> fillKPI()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("fillKPI");
        }
    
        public virtual ObjectResult<Nullable<int>> fillModal(Nullable<int> leaveId, Nullable<int> employeeId, Nullable<int> approverId)
        {
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("LeaveId", leaveId) :
                new ObjectParameter("LeaveId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var approverIdParameter = approverId.HasValue ?
                new ObjectParameter("ApproverId", approverId) :
                new ObjectParameter("ApproverId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("fillModal", leaveIdParameter, employeeIdParameter, approverIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> fillModal2(Nullable<int> leaveId, Nullable<int> employeeId, Nullable<int> approverId)
        {
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("LeaveId", leaveId) :
                new ObjectParameter("LeaveId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var approverIdParameter = approverId.HasValue ?
                new ObjectParameter("ApproverId", approverId) :
                new ObjectParameter("ApproverId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("fillModal2", leaveIdParameter, employeeIdParameter, approverIdParameter);
        }
    
        public virtual ObjectResult<fillMonth_Result> fillMonth()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<fillMonth_Result>("fillMonth");
        }
    
        public virtual ObjectResult<string> fillSites(string accountID)
        {
            var accountIDParameter = accountID != null ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("fillSites", accountIDParameter);
        }
    
        public virtual ObjectResult<getDefaultLeaveType_Result> getDefaultLeaveType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getDefaultLeaveType_Result>("getDefaultLeaveType");
        }
    
        public virtual int GetDeptValues(Nullable<int> functionID, Nullable<int> departmentID, Nullable<int> lOBID, Nullable<int> skillSetID, Nullable<int> subSkillSetID)
        {
            var functionIDParameter = functionID.HasValue ?
                new ObjectParameter("FunctionID", functionID) :
                new ObjectParameter("FunctionID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var lOBIDParameter = lOBID.HasValue ?
                new ObjectParameter("LOBID", lOBID) :
                new ObjectParameter("LOBID", typeof(int));
    
            var skillSetIDParameter = skillSetID.HasValue ?
                new ObjectParameter("SkillSetID", skillSetID) :
                new ObjectParameter("SkillSetID", typeof(int));
    
            var subSkillSetIDParameter = subSkillSetID.HasValue ?
                new ObjectParameter("SubSkillSetID", subSkillSetID) :
                new ObjectParameter("SubSkillSetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDeptValues", functionIDParameter, departmentIDParameter, lOBIDParameter, skillSetIDParameter, subSkillSetIDParameter);
        }
    
        public virtual ObjectResult<GetEmployeeLeaveRequestes_Result> GetEmployeeLeaveRequestes(Nullable<int> empCode, Nullable<int> who, string l1, string l2)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var whoParameter = who.HasValue ?
                new ObjectParameter("Who", who) :
                new ObjectParameter("Who", typeof(int));
    
            var l1Parameter = l1 != null ?
                new ObjectParameter("L1", l1) :
                new ObjectParameter("L1", typeof(string));
    
            var l2Parameter = l2 != null ?
                new ObjectParameter("L2", l2) :
                new ObjectParameter("L2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLeaveRequestes_Result>("GetEmployeeLeaveRequestes", empCodeParameter, whoParameter, l1Parameter, l2Parameter);
        }
    
        public virtual ObjectResult<GetEmployeeLeaveRequestes2_Result> GetEmployeeLeaveRequestes2(Nullable<int> empCode, Nullable<int> who, string l1, string l2)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var whoParameter = who.HasValue ?
                new ObjectParameter("Who", who) :
                new ObjectParameter("Who", typeof(int));
    
            var l1Parameter = l1 != null ?
                new ObjectParameter("L1", l1) :
                new ObjectParameter("L1", typeof(string));
    
            var l2Parameter = l2 != null ?
                new ObjectParameter("L2", l2) :
                new ObjectParameter("L2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLeaveRequestes2_Result>("GetEmployeeLeaveRequestes2", empCodeParameter, whoParameter, l1Parameter, l2Parameter);
        }
    
        public virtual ObjectResult<getEmployeeLeaveRoster_Result> getEmployeeLeaveRoster(Nullable<int> leaveID)
        {
            var leaveIDParameter = leaveID.HasValue ?
                new ObjectParameter("LeaveID", leaveID) :
                new ObjectParameter("LeaveID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getEmployeeLeaveRoster_Result>("getEmployeeLeaveRoster", leaveIDParameter);
        }
    
        public virtual ObjectResult<getEmployeeMgrs_Result> getEmployeeMgrs(Nullable<int> empCd)
        {
            var empCdParameter = empCd.HasValue ?
                new ObjectParameter("EmpCd", empCd) :
                new ObjectParameter("EmpCd", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getEmployeeMgrs_Result>("getEmployeeMgrs", empCdParameter);
        }
    
        public virtual ObjectResult<GetEmpNameByManagerID_Result> GetEmpNameByManagerID(Nullable<int> eMPCODE)
        {
            var eMPCODEParameter = eMPCODE.HasValue ?
                new ObjectParameter("EMPCODE", eMPCODE) :
                new ObjectParameter("EMPCODE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmpNameByManagerID_Result>("GetEmpNameByManagerID", eMPCODEParameter);
        }
    
        public virtual ObjectResult<GetIntervalTracker_Result> GetIntervalTracker(Nullable<int> empCode)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIntervalTracker_Result>("GetIntervalTracker", empCodeParameter);
        }
    
        public virtual ObjectResult<getLeavedatesandLeavereason_Result> getLeavedatesandLeavereason(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getLeavedatesandLeavereason_Result>("getLeavedatesandLeavereason", idParameter);
        }
    
        public virtual ObjectResult<getLeaveList_Result> getLeaveList(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> desig)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var desigParameter = desig.HasValue ?
                new ObjectParameter("desig", desig) :
                new ObjectParameter("desig", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getLeaveList_Result>("getLeaveList", startDateParameter, endDateParameter, desigParameter);
        }
    
        public virtual ObjectResult<getLeaveRoster_Result> getLeaveRoster(Nullable<int> empCode, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getLeaveRoster_Result>("getLeaveRoster", empCodeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> getMinDateforLeaveRequest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("getMinDateforLeaveRequest");
        }
    
        public virtual ObjectResult<GetRepRevMgr_Result> GetRepRevMgr(Nullable<int> empCode)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRepRevMgr_Result>("GetRepRevMgr", empCodeParameter);
        }
    
        public virtual int GetRosterAdmin(Nullable<int> countryID, Nullable<int> siteID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRosterAdmin", countryIDParameter, siteIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int GetRosterInformation(Nullable<int> repMgrCode, Nullable<int> weekID)
        {
            var repMgrCodeParameter = repMgrCode.HasValue ?
                new ObjectParameter("RepMgrCode", repMgrCode) :
                new ObjectParameter("RepMgrCode", typeof(int));
    
            var weekIDParameter = weekID.HasValue ?
                new ObjectParameter("WeekID", weekID) :
                new ObjectParameter("WeekID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRosterInformation", repMgrCodeParameter, weekIDParameter);
        }
    
        public virtual ObjectResult<getSiteEmployeeData_Result> getSiteEmployeeData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getSiteEmployeeData_Result>("getSiteEmployeeData");
        }
    
        public virtual ObjectResult<GetWeeks_Result> GetWeeks(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWeeks_Result>("GetWeeks", yearParameter);
        }
    
        public virtual int InsertIntervalTracker(Nullable<System.DateTime> date, Nullable<System.TimeSpan> interval, string account, string lOB, string sites, string issue, string incidentType, string clientTicket, string sitelTicket, string attachment, Nullable<int> actionBy)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("Interval", interval) :
                new ObjectParameter("Interval", typeof(System.TimeSpan));
    
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            var lOBParameter = lOB != null ?
                new ObjectParameter("LOB", lOB) :
                new ObjectParameter("LOB", typeof(string));
    
            var sitesParameter = sites != null ?
                new ObjectParameter("Sites", sites) :
                new ObjectParameter("Sites", typeof(string));
    
            var issueParameter = issue != null ?
                new ObjectParameter("Issue", issue) :
                new ObjectParameter("Issue", typeof(string));
    
            var incidentTypeParameter = incidentType != null ?
                new ObjectParameter("IncidentType", incidentType) :
                new ObjectParameter("IncidentType", typeof(string));
    
            var clientTicketParameter = clientTicket != null ?
                new ObjectParameter("ClientTicket", clientTicket) :
                new ObjectParameter("ClientTicket", typeof(string));
    
            var sitelTicketParameter = sitelTicket != null ?
                new ObjectParameter("SitelTicket", sitelTicket) :
                new ObjectParameter("SitelTicket", typeof(string));
    
            var attachmentParameter = attachment != null ?
                new ObjectParameter("Attachment", attachment) :
                new ObjectParameter("Attachment", typeof(string));
    
            var actionByParameter = actionBy.HasValue ?
                new ObjectParameter("ActionBy", actionBy) :
                new ObjectParameter("ActionBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntervalTracker", dateParameter, intervalParameter, accountParameter, lOBParameter, sitesParameter, issueParameter, incidentTypeParameter, clientTicketParameter, sitelTicketParameter, attachmentParameter, actionByParameter);
        }
    
        public virtual int InsertLeaveRecords(Nullable<int> empCode, Nullable<System.DateTime> from_date, Nullable<System.DateTime> to_date, string leave_reason, ObjectParameter xLEAVE_BATCH_ID, ObjectParameter stop)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var from_dateParameter = from_date.HasValue ?
                new ObjectParameter("from_date", from_date) :
                new ObjectParameter("from_date", typeof(System.DateTime));
    
            var to_dateParameter = to_date.HasValue ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(System.DateTime));
    
            var leave_reasonParameter = leave_reason != null ?
                new ObjectParameter("leave_reason", leave_reason) :
                new ObjectParameter("leave_reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLeaveRecords", empCodeParameter, from_dateParameter, to_dateParameter, leave_reasonParameter, xLEAVE_BATCH_ID, stop);
        }
    
        public virtual int Leave_Cancel2Roster(Nullable<int> lEAVE_BATCH_ID)
        {
            var lEAVE_BATCH_IDParameter = lEAVE_BATCH_ID.HasValue ?
                new ObjectParameter("LEAVE_BATCH_ID", lEAVE_BATCH_ID) :
                new ObjectParameter("LEAVE_BATCH_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Leave_Cancel2Roster", lEAVE_BATCH_IDParameter);
        }
    
        public virtual int Leave_Commit2Roster(Nullable<int> lEAVE_BATCH_ID)
        {
            var lEAVE_BATCH_IDParameter = lEAVE_BATCH_ID.HasValue ?
                new ObjectParameter("LEAVE_BATCH_ID", lEAVE_BATCH_ID) :
                new ObjectParameter("LEAVE_BATCH_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Leave_Commit2Roster", lEAVE_BATCH_IDParameter);
        }
    
        public virtual int Leave_Decline2Roster(Nullable<int> lEAVE_BATCH_ID)
        {
            var lEAVE_BATCH_IDParameter = lEAVE_BATCH_ID.HasValue ?
                new ObjectParameter("LEAVE_BATCH_ID", lEAVE_BATCH_ID) :
                new ObjectParameter("LEAVE_BATCH_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Leave_Decline2Roster", lEAVE_BATCH_IDParameter);
        }
    
        public virtual int Profile_SaveUserImage(string userImage, string updated_by, Nullable<int> employee_ID)
        {
            var userImageParameter = userImage != null ?
                new ObjectParameter("UserImage", userImage) :
                new ObjectParameter("UserImage", typeof(string));
    
            var updated_byParameter = updated_by != null ?
                new ObjectParameter("Updated_by", updated_by) :
                new ObjectParameter("Updated_by", typeof(string));
    
            var employee_IDParameter = employee_ID.HasValue ?
                new ObjectParameter("Employee_ID", employee_ID) :
                new ObjectParameter("Employee_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Profile_SaveUserImage", userImageParameter, updated_byParameter, employee_IDParameter);
        }
    
        public virtual int Profile_UpdateEmployeeData(Nullable<int> employee_ID, Nullable<System.DateTime> date_of_Birth, string gender, string email_Personal, Nullable<long> contact_Number, string maritalStatus, Nullable<System.DateTime> anniversaryDate, string qualification, Nullable<bool> transport, string address1, string address2, string landmark, Nullable<int> location, string subLocation, string city, Nullable<int> pincode, Nullable<int> total_Work_Experience, string skill1, string skill2, string skill3, Nullable<long> alternate_Contact, string emergencyContactPerson, Nullable<long> emergencyContactNo, string updated_by, Nullable<System.DateTime> update_Date)
        {
            var employee_IDParameter = employee_ID.HasValue ?
                new ObjectParameter("Employee_ID", employee_ID) :
                new ObjectParameter("Employee_ID", typeof(int));
    
            var date_of_BirthParameter = date_of_Birth.HasValue ?
                new ObjectParameter("Date_of_Birth", date_of_Birth) :
                new ObjectParameter("Date_of_Birth", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var email_PersonalParameter = email_Personal != null ?
                new ObjectParameter("Email_Personal", email_Personal) :
                new ObjectParameter("Email_Personal", typeof(string));
    
            var contact_NumberParameter = contact_Number.HasValue ?
                new ObjectParameter("Contact_Number", contact_Number) :
                new ObjectParameter("Contact_Number", typeof(long));
    
            var maritalStatusParameter = maritalStatus != null ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(string));
    
            var anniversaryDateParameter = anniversaryDate.HasValue ?
                new ObjectParameter("AnniversaryDate", anniversaryDate) :
                new ObjectParameter("AnniversaryDate", typeof(System.DateTime));
    
            var qualificationParameter = qualification != null ?
                new ObjectParameter("Qualification", qualification) :
                new ObjectParameter("Qualification", typeof(string));
    
            var transportParameter = transport.HasValue ?
                new ObjectParameter("Transport", transport) :
                new ObjectParameter("Transport", typeof(bool));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var landmarkParameter = landmark != null ?
                new ObjectParameter("Landmark", landmark) :
                new ObjectParameter("Landmark", typeof(string));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var subLocationParameter = subLocation != null ?
                new ObjectParameter("SubLocation", subLocation) :
                new ObjectParameter("SubLocation", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var pincodeParameter = pincode.HasValue ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(int));
    
            var total_Work_ExperienceParameter = total_Work_Experience.HasValue ?
                new ObjectParameter("Total_Work_Experience", total_Work_Experience) :
                new ObjectParameter("Total_Work_Experience", typeof(int));
    
            var skill1Parameter = skill1 != null ?
                new ObjectParameter("Skill1", skill1) :
                new ObjectParameter("Skill1", typeof(string));
    
            var skill2Parameter = skill2 != null ?
                new ObjectParameter("Skill2", skill2) :
                new ObjectParameter("Skill2", typeof(string));
    
            var skill3Parameter = skill3 != null ?
                new ObjectParameter("Skill3", skill3) :
                new ObjectParameter("Skill3", typeof(string));
    
            var alternate_ContactParameter = alternate_Contact.HasValue ?
                new ObjectParameter("Alternate_Contact", alternate_Contact) :
                new ObjectParameter("Alternate_Contact", typeof(long));
    
            var emergencyContactPersonParameter = emergencyContactPerson != null ?
                new ObjectParameter("EmergencyContactPerson", emergencyContactPerson) :
                new ObjectParameter("EmergencyContactPerson", typeof(string));
    
            var emergencyContactNoParameter = emergencyContactNo.HasValue ?
                new ObjectParameter("EmergencyContactNo", emergencyContactNo) :
                new ObjectParameter("EmergencyContactNo", typeof(long));
    
            var updated_byParameter = updated_by != null ?
                new ObjectParameter("Updated_by", updated_by) :
                new ObjectParameter("Updated_by", typeof(string));
    
            var update_DateParameter = update_Date.HasValue ?
                new ObjectParameter("Update_Date", update_Date) :
                new ObjectParameter("Update_Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Profile_UpdateEmployeeData", employee_IDParameter, date_of_BirthParameter, genderParameter, email_PersonalParameter, contact_NumberParameter, maritalStatusParameter, anniversaryDateParameter, qualificationParameter, transportParameter, address1Parameter, address2Parameter, landmarkParameter, locationParameter, subLocationParameter, cityParameter, pincodeParameter, total_Work_ExperienceParameter, skill1Parameter, skill2Parameter, skill3Parameter, alternate_ContactParameter, emergencyContactPersonParameter, emergencyContactNoParameter, updated_byParameter, update_DateParameter);
        }
    
        public virtual ObjectResult<Roster_GetAdminFormatRoster_Result> Roster_GetAdminFormatRoster(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Roster_GetAdminFormatRoster_Result>("Roster_GetAdminFormatRoster", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Roster_GetEmployeeSpecificRoster_Result> Roster_GetEmployeeSpecificRoster(Nullable<int> empID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Roster_GetEmployeeSpecificRoster_Result>("Roster_GetEmployeeSpecificRoster", empIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Roster_loadCancelledLeaves_Result> Roster_loadCancelledLeaves(Nullable<int> repMgrCode, Nullable<int> weekId)
        {
            var repMgrCodeParameter = repMgrCode.HasValue ?
                new ObjectParameter("RepMgrCode", repMgrCode) :
                new ObjectParameter("RepMgrCode", typeof(int));
    
            var weekIdParameter = weekId.HasValue ?
                new ObjectParameter("WeekId", weekId) :
                new ObjectParameter("WeekId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Roster_loadCancelledLeaves_Result>("Roster_loadCancelledLeaves", repMgrCodeParameter, weekIdParameter);
        }
    
        public virtual ObjectResult<Roster_loadLeaves_Result> Roster_loadLeaves(Nullable<int> repMgrCode, Nullable<int> weekId)
        {
            var repMgrCodeParameter = repMgrCode.HasValue ?
                new ObjectParameter("RepMgrCode", repMgrCode) :
                new ObjectParameter("RepMgrCode", typeof(int));
    
            var weekIdParameter = weekId.HasValue ?
                new ObjectParameter("WeekId", weekId) :
                new ObjectParameter("WeekId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Roster_loadLeaves_Result>("Roster_loadLeaves", repMgrCodeParameter, weekIdParameter);
        }
    
        public virtual ObjectResult<Swap_getSwapStatus_Result> Swap_getSwapStatus(Nullable<int> empCode, string role)
        {
            var empCodeParameter = empCode.HasValue ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(int));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Swap_getSwapStatus_Result>("Swap_getSwapStatus", empCodeParameter, roleParameter);
        }
    
        public virtual int Swap_GetSwapWithinSpecificTeam(Nullable<int> empID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Swap_GetSwapWithinSpecificTeam", empIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Swap_GetSwapWithinSpecificTeam_2_Result> Swap_GetSwapWithinSpecificTeam_2(Nullable<int> empID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Swap_GetSwapWithinSpecificTeam_2_Result>("Swap_GetSwapWithinSpecificTeam_2", empIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int Swap_Insert2DB(Nullable<System.DateTime> date, Nullable<int> weekID, Nullable<int> empCode1, Nullable<int> shiftID1, Nullable<int> newShiftID1, Nullable<int> empCode2, Nullable<int> shiftID2, Nullable<int> newShiftID2, Nullable<int> actionByEmpCode2, Nullable<System.DateTime> actionByEmpCode2On, Nullable<int> repMgrCode, Nullable<bool> actionByRepMgr, Nullable<System.DateTime> actionByRepMgrOn)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var weekIDParameter = weekID.HasValue ?
                new ObjectParameter("WeekID", weekID) :
                new ObjectParameter("WeekID", typeof(int));
    
            var empCode1Parameter = empCode1.HasValue ?
                new ObjectParameter("EmpCode1", empCode1) :
                new ObjectParameter("EmpCode1", typeof(int));
    
            var shiftID1Parameter = shiftID1.HasValue ?
                new ObjectParameter("ShiftID1", shiftID1) :
                new ObjectParameter("ShiftID1", typeof(int));
    
            var newShiftID1Parameter = newShiftID1.HasValue ?
                new ObjectParameter("NewShiftID1", newShiftID1) :
                new ObjectParameter("NewShiftID1", typeof(int));
    
            var empCode2Parameter = empCode2.HasValue ?
                new ObjectParameter("EmpCode2", empCode2) :
                new ObjectParameter("EmpCode2", typeof(int));
    
            var shiftID2Parameter = shiftID2.HasValue ?
                new ObjectParameter("ShiftID2", shiftID2) :
                new ObjectParameter("ShiftID2", typeof(int));
    
            var newShiftID2Parameter = newShiftID2.HasValue ?
                new ObjectParameter("NewShiftID2", newShiftID2) :
                new ObjectParameter("NewShiftID2", typeof(int));
    
            var actionByEmpCode2Parameter = actionByEmpCode2.HasValue ?
                new ObjectParameter("ActionByEmpCode2", actionByEmpCode2) :
                new ObjectParameter("ActionByEmpCode2", typeof(int));
    
            var actionByEmpCode2OnParameter = actionByEmpCode2On.HasValue ?
                new ObjectParameter("ActionByEmpCode2On", actionByEmpCode2On) :
                new ObjectParameter("ActionByEmpCode2On", typeof(System.DateTime));
    
            var repMgrCodeParameter = repMgrCode.HasValue ?
                new ObjectParameter("RepMgrCode", repMgrCode) :
                new ObjectParameter("RepMgrCode", typeof(int));
    
            var actionByRepMgrParameter = actionByRepMgr.HasValue ?
                new ObjectParameter("ActionByRepMgr", actionByRepMgr) :
                new ObjectParameter("ActionByRepMgr", typeof(bool));
    
            var actionByRepMgrOnParameter = actionByRepMgrOn.HasValue ?
                new ObjectParameter("ActionByRepMgrOn", actionByRepMgrOn) :
                new ObjectParameter("ActionByRepMgrOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Swap_Insert2DB", dateParameter, weekIDParameter, empCode1Parameter, shiftID1Parameter, newShiftID1Parameter, empCode2Parameter, shiftID2Parameter, newShiftID2Parameter, actionByEmpCode2Parameter, actionByEmpCode2OnParameter, repMgrCodeParameter, actionByRepMgrParameter, actionByRepMgrOnParameter);
        }
    
        public virtual int Swap_Update2DB(Nullable<int> swapID, Nullable<int> actionByEmpCode2, Nullable<System.DateTime> actionByEmpCode2On, Nullable<bool> actionByRepMgr, Nullable<System.DateTime> actionByRepMgrOn)
        {
            var swapIDParameter = swapID.HasValue ?
                new ObjectParameter("SwapID", swapID) :
                new ObjectParameter("SwapID", typeof(int));
    
            var actionByEmpCode2Parameter = actionByEmpCode2.HasValue ?
                new ObjectParameter("ActionByEmpCode2", actionByEmpCode2) :
                new ObjectParameter("ActionByEmpCode2", typeof(int));
    
            var actionByEmpCode2OnParameter = actionByEmpCode2On.HasValue ?
                new ObjectParameter("ActionByEmpCode2On", actionByEmpCode2On) :
                new ObjectParameter("ActionByEmpCode2On", typeof(System.DateTime));
    
            var actionByRepMgrParameter = actionByRepMgr.HasValue ?
                new ObjectParameter("ActionByRepMgr", actionByRepMgr) :
                new ObjectParameter("ActionByRepMgr", typeof(bool));
    
            var actionByRepMgrOnParameter = actionByRepMgrOn.HasValue ?
                new ObjectParameter("ActionByRepMgrOn", actionByRepMgrOn) :
                new ObjectParameter("ActionByRepMgrOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Swap_Update2DB", swapIDParameter, actionByEmpCode2Parameter, actionByEmpCode2OnParameter, actionByRepMgrParameter, actionByRepMgrOnParameter);
        }
    
        public virtual ObjectResult<TeamList_Result> TeamList(Nullable<int> repMgrCode)
        {
            var repMgrCodeParameter = repMgrCode.HasValue ?
                new ObjectParameter("RepMgrCode", repMgrCode) :
                new ObjectParameter("RepMgrCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TeamList_Result>("TeamList", repMgrCodeParameter);
        }
    
        public virtual ObjectResult<Transfer_ActionsList_Result> Transfer_ActionsList(Nullable<int> repMgrCode)
        {
            var repMgrCodeParameter = repMgrCode.HasValue ?
                new ObjectParameter("RepMgrCode", repMgrCode) :
                new ObjectParameter("RepMgrCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Transfer_ActionsList_Result>("Transfer_ActionsList", repMgrCodeParameter);
        }
    
        public virtual int Transfer_ApproveAndCommitToMaster(Nullable<int> movementId, Nullable<int> state, Nullable<int> updaterID, Nullable<System.DateTime> effectiveDate)
        {
            var movementIdParameter = movementId.HasValue ?
                new ObjectParameter("MovementId", movementId) :
                new ObjectParameter("MovementId", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var updaterIDParameter = updaterID.HasValue ?
                new ObjectParameter("UpdaterID", updaterID) :
                new ObjectParameter("UpdaterID", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Transfer_ApproveAndCommitToMaster", movementIdParameter, stateParameter, updaterIDParameter, effectiveDateParameter);
        }
    
        public virtual int Transfer_ApproveAndCommitToMaster_JOB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Transfer_ApproveAndCommitToMaster_JOB");
        }
    
        public virtual ObjectResult<Transfer_DepartmentList_Result> Transfer_DepartmentList(Nullable<int> repMgrCode)
        {
            var repMgrCodeParameter = repMgrCode.HasValue ?
                new ObjectParameter("RepMgrCode", repMgrCode) :
                new ObjectParameter("RepMgrCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Transfer_DepartmentList_Result>("Transfer_DepartmentList", repMgrCodeParameter);
        }
    
        public virtual ObjectResult<Transfer_getTransfereeUsingMovementID_Result> Transfer_getTransfereeUsingMovementID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Transfer_getTransfereeUsingMovementID_Result>("Transfer_getTransfereeUsingMovementID", iDParameter);
        }
    
        public virtual ObjectResult<Transfer_TeamList_Result> Transfer_TeamList(Nullable<int> repMgrCode)
        {
            var repMgrCodeParameter = repMgrCode.HasValue ?
                new ObjectParameter("RepMgrCode", repMgrCode) :
                new ObjectParameter("RepMgrCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Transfer_TeamList_Result>("Transfer_TeamList", repMgrCodeParameter);
        }
    
        public virtual int UpdateApproval(Nullable<int> approverID, Nullable<int> empID, Nullable<int> id, string comments)
        {
            var approverIDParameter = approverID.HasValue ?
                new ObjectParameter("ApproverID", approverID) :
                new ObjectParameter("ApproverID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateApproval", approverIDParameter, empIDParameter, idParameter, commentsParameter);
        }
    
        public virtual int UpdateDecline(Nullable<int> approverID, Nullable<int> empID, Nullable<int> id, string comments, ObjectParameter bit)
        {
            var approverIDParameter = approverID.HasValue ?
                new ObjectParameter("ApproverID", approverID) :
                new ObjectParameter("ApproverID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDecline", approverIDParameter, empIDParameter, idParameter, commentsParameter, bit);
        }
    
        public virtual ObjectResult<getEmployeeData_Result> getEmployeeData(string nT_ID)
        {
            var nT_IDParameter = nT_ID != null ?
                new ObjectParameter("NT_ID", nT_ID) :
                new ObjectParameter("NT_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getEmployeeData_Result>("getEmployeeData", nT_IDParameter);
        }
    }
}
